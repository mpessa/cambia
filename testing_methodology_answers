1. QA is an essential role in the development process because the QA process is designed to test all aspects of the software before deployment to production can occur. QA engineers are usually integrated with a development team to ensure a high quality of code is deployed. They are in charge of developing test cases that may or may not occur but still have a possibility. The testing procedure involves testing the happy path (things going the way that they should without error) as well as the bad path (errors, errors everywhere). QA also includes regression testing, integration testing, as well as all manner of automated and manual testing.

2. The first thing that I would do would be to ensure that I have a very good understanding of the software that will be built. Knowing how it is supposed to behave before the development begins will allow me to ensure that the test plan that is developed checks all aspects of the software or at least all aspects that I can reasonably test and can envision. I would start building a test plan to check the behavior of the software at all points. There would be specific checks for end results with known good values and known incorrect data. Add test cases that would ensure that errors are actually thrown when they should be. Generic errors should be shown to the end user but detailed error logging should occur. I would also ensure that I have met the development team and they know me as well. I will have to be the one to give them the bad news if tests aren't passing and they have to go back and fix their code.

3. Automated testing can be used for regression and unit testing. It can also be used for some aspects of integration testing. Manual testing should be used as little as possible to ensure that user error does not creep into the testing process. There are aspects of the various programs where automated testing is not feasible. These are generally edge or corner cases.

4. The focus of integration testing is to test how different parts of the whole interact with each other instead of how a singular aspect works. The most important features to test in this case would be the refactored features. In my eyes, they would be the most important because end users already expect these to work in a certain way. If there are any changes to the behavior because of the refactoring, they would need to be focused on before the new features. In the case where we aren't able to test everything, I would strive to test that everything is working properly over ensuring that errors are handled properly. Given the unit tests written by the developers, the internal functions should all work properly. It's not a guarantee that they will though.
